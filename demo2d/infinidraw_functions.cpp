#include "Color.h"
double currentBrushSize;
Color currentColor;

int screenHeight;
int screenWidth;
#include "QuadtreeRenderer.h"
#include "Texture2DShader.h"
#include "epiclib3/Utils/Debug.h"
QuadTree * currentTree;
QuadtreeRenderer * QuadTreeRenderer;
Texture2DShader * texShader;

unsigned int getHeight(){
	return screenHeight;
}
unsigned int getWidth(){
	return screenWidth;
}

void SetBrushSize(double Scale){
  currentBrushSize = Scale;
 }
 void SetColor(float r, float g, float b, float a){
   currentColor = color(vec(r,g,b,a));
 }
 void MoveCamera(double dx, double dy){
   QuadTreeRenderer->Move(vec(dx,dy));
 }
 void Zoom(double amount, int aroundX, int aroundY){
   QuadTreeRenderer->ZoomInAroundScreenPos(amount,vec(aroundX,aroundY));
 }
 int GetColorAt(int screenX, int screenY){
   Color col = QuadTreeRenderer->sampleColor(vec(screenX,screenY));
   return col[0] + col[1] << 8 + col[2] << 16 + col[3] << 24;
 }
 void PaintAt(int screenX, int screenY){
   QuadTreeRenderer->PaintDotScreen(vec(screenX,screenY),currentColor,currentBrushSize);
 }

void PaintDone(){
  QuadTreeRenderer->finishedPainting();
}

 void SetScreenSize(int _screenWidth, int _screenHeight){
	 screenHeight = _screenHeight;
	 screenWidth = _screenWidth;
	 QuadTreeRenderer->SetWindowSize(vec(_screenWidth,_screenHeight));
 }

void genQuadTreeRec(QuadTree * qt, int lv){
  for(int i = 0; i < 4;i++){
    if(qt->parent != NULL){
      qt->get_child(i,true)->Data = qt->parent->Data;
    }
  }
  switch(rand()%3){
  case 0:
    qt->Data = color(vec(0.5f,0.5f,0.0f,1.0f));break;
  case 1:
    qt->Data = color(vec(0.5f,1.0f,0.0f,1.0f));break;
  case 2:
    qt->Data = color(vec(0.5f,0.2f,1.0f,1.0f));break;
  }
 if(lv == 0){
    return;
  }
  for(int i = 1;i < 4;i++){
    genQuadTreeRec(qt->get_child(i,true),lv - 1);
  }
}

void recGen2(QuadTree * qt,int lvs){
  if(lvs == 0){
    return;
  }
  qt->get_child(0,true)->Data = color(vec(0.0f,0.3f,0.0f,1.0f));
  qt->get_child(1,true)->Data = color(vec(0.0f,0.5f,0.0f,1.0f));
  qt->get_child(2,true)->Data = color(vec(0.0f,0.6f,0.0f,1.0f));
  recGen2(qt->get_child(3,true),lvs-1);
}

QuadTree * genQuadTree(){
  QuadTree * qt = new QuadTree();
  recGen2(qt,10);
  qt->relative_node(vec(1,1),true)->Data = color(vec(0.0f,0.0f,0.5f,1.0f));
  //return qt;
  return qt->get_child(3,true)->get_child(3,true)->get_child(0,true);
}
unsigned char tex2DShader_vert[] = {
  0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65,
  0x63, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79,
  0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x3b,
  0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63,
  0x32, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a,
  0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x32,
  0x20, 0x73, 0x69, 0x7a, 0x65, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f,
  0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x53, 0x69,
  0x7a, 0x65, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20,
  0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x50, 0x6f, 0x73, 0x3b, 0x0a,
  0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x7b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x70,
  0x6f, 0x73, 0x20, 0x2a, 0x20, 0x75, 0x76, 0x53, 0x69, 0x7a, 0x65, 0x20,
  0x2b, 0x20, 0x75, 0x76, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
  0x6e, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x32, 0x2e, 0x30,
  0x2a, 0x28, 0x70, 0x6f, 0x73, 0x2a, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x2b,
  0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x2d,
  0x20, 0x31, 0x2e, 0x30, 0x2c, 0x30, 0x2c, 0x31, 0x29, 0x3b, 0x0a, 0x7d,
  0x00
};
unsigned int tex2DShader_vert_len = 228;
unsigned char tex2DShader_frag[] = {
  0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70,
  0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x3b, 0x0a, 0x75,
  0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20,
  0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69,
  0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a,
  0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x7b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
  0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44,
  0x28, 0x74, 0x65, 0x78, 0x2c, 0x75, 0x76, 0x29, 0x20, 0x2a, 0x20, 0x63,
  0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d,0x00
};
unsigned int tex2DShader_frag_len = 127;


void init_infinidraw(){
  texShader = new Texture2DShader((char *)tex2DShader_vert,(char *)tex2DShader_frag);
	
  currentTree = genQuadTree();
  float squaredata[] = {0,0,
			1.0,0.0,
			1.0,1.0,
			0.0,1.0,
			0.0,0.0};
  QuadTree * qt = currentTree;
  VBO SquareBuffer(squaredata,5,2,VBODrawType::Static);
  QuadTreeRenderer = new QuadtreeRenderer(qt,SquareBuffer,*texShader,vec(512,512));

}
void infinidraw_render(){
  QuadTreeRenderer->Render();
}
